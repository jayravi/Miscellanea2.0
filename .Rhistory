+ ))
M <- matrix(nrow = 6, ncol = 6, byrow = TRUE, data = c(
+     0, 0, 0, 0, 0, 0,
+     0, 0, 0, 0, 0, 0,
+     1, 1, 0, 0, 0, 0,
+     1, 1, 0, 0, 0, 0,
+     0, 0, 1, 1, 0, 0,
+     0, 0, 1, 1, 0, 0
+ )
M <- matrix(nrow = 6, ncol = 6, byrow = TRUE, data = c(
+     0, 0, 0, 0, 0, 0,
+     0, 0, 0, 0, 0, 0,
+     1, 1, 0, 0, 0, 0,
+     1, 1, 0, 0, 0, 0,
+     0, 0, 1, 1, 0, 0,
+     0, 0, 1, 1, 0, 0
+ ))
M <- matrix(nrow = 6, ncol = 6, byrow = TRUE, data = c(
+     0, 0, 0, 0, 0, 0,
+     0, 0, 0, 0, 0, 0,
+     1, 1, 0, 0, 0, 0,
+     1, 1, 0, 0, 0, 0,
+     0, 0, 1, 1, 0, 0,
+     0, 0, 1, 1, 0, 0))
pp <- plotmat(M, pos=c(2,2,2), curve = .1, name=groups, box.type = "circle", lwd=1, box.lwd = 2, box.prop = .5, cex.txt = .8, arr.pos = .6, box.size = 0.1, arr.length = 0.3)
M <- matrix(nrow = 6, ncol = 6, byrow = TRUE, data = c(
+     0, 0, 0, 0, 0, 0,
+     0, 0, 0, 0, 0, 0,
+     0, 0, 0, 0, 0, 0,
+     1, 1, 0, 0, 0, 0,
+     0, 0, 1, 1, 0, 0,
+     0, 0, 1, 1, 0, 0))
pp <- plotmat(M, pos=c(2,2,2), curve = .1, name=groups, box.type = "circle", lwd=1, box.lwd = 2, box.prop = .5, cex.txt = .8, arr.pos = .6, box.size = 0.1, arr.length = 0.3)
M <- matrix(nrow = 6, ncol = 6, byrow = TRUE, data = c(
+     0, 0, 0, 0, 0, 0,
+     0, 0, 0, 0, 0, 0,
+     1, 1, 0, 0, 0, 0,
+     1, 1, 0, 0, 0, 0,
+     0, 0, 1, 1, 0, 0,
+     0, 0, 1, 1, 0, 0))
pp <- plotmat(M, pos=c(2,2,2), curve = .1, name=groups, box.type = "circle", lwd=1, box.lwd = 2, box.prop = .5, cex.txt = .8, arr.pos = .6, box.size = 0.1, arr.length = 0.3)
pp <- plotmat(M, pos=c(2,2,2), curve = .1, name=groups, box.type = "circle", lwd=1, box.lwd = 2, box.prop = .5, cex.txt = .1, arr.pos = .6, box.size = 0.1, arr.length = 0.3)
pp <- plotmat(M, pos=c(2,2,2), curve = c(.1,.2..3), name=groups, box.type = "circle", lwd=1, box.lwd = 2, box.prop = .5, cex.txt = .1, arr.pos = .6, box.size = 0.1, arr.length = 0.3)
pp <- plotmat(M, pos=c(2,2,2), curve = .2, name=groups, box.type = "circle", lwd=1, box.lwd = 2, box.prop = .5, cex.txt = .1, arr.pos = .6, box.size = 0.1, arr.length = 0.3)
pp <- plotmat(M, pos=c(2,2,2), curve = .2, name=groups, box.type = "circle", lwd=1, box.lwd = 2, box.prop = .5, cex.txt = .1, arr.pos = .6, box.size = 0.1, arr.length = 0.3, box.col = "gray")
pp <- plotmat(M, pos=c(2,2,2), curve = .2, name=groups, box.type = "circle", lwd=1, box.lwd = 2, box.prop = .5, cex.txt = .1, arr.pos = .6, box.size = 0.1, arr.length = 0.3, box.col = "gold")
pp <- plotmat(M, pos=c(2,2,2), curve = .2, name=groups, box.type = "circle", lwd=1, box.lwd = 2, box.prop = .5, cex.txt = .1, arr.pos = .6, box.size = 0.1, arr.length = 0.3, box.col = "peach")
pp <- plotmat(M, pos=c(2,2,2), curve = .2, name=groups, box.type = "circle", lwd=1, box.lwd = 2, box.prop = .5, cex.txt = .1, arr.pos = .6, box.size = 0.1, arr.length = 0.3, box.col = "pink")
demo(plotmat)
demo(plotweb)
install.packages("eulerr")
library(data.table)
install.packages(data.table)
install.packages("data.table")
library(data.table)
dt <- data.table(v1 = c=1:20,
v2 = LETTERS[1:20],
v3 = round(rnorm(4)),0)
dt <- data.table(v1 = c=1:20,
v2 = LETTERS[1:2],
v3 = round(rnorm(4)),0)
dt <- data.table(v1 = c=1:20)
dt <- data.table(V1 = c=1:20)
dt <- data.table(v1 = 1:20,
v2 = LETTERS[1:2],
v3 = round(rnorm(4)),0)
dt
dt <- data.table(v1 = 1:20,
v2 = LETTERS[1:20],
v3 = round(rnorm(4)))
dt
dt[v3==0]
dt[v3==1]
dt[v3==0]
table(dt[v3==0])
table(dt)
dt
plot(dt)
plot(dt.v1, dt.v3)
plot(dt$v1, dt$v3)
plot(dt$v1, dt$v2)
dt
install.packages("tufte")
unlink('Downloads/Tuftetry_cache', recursive = TRUE)
unlink('Downloads/Tuftetry_cache', recursive = TRUE)
unlink('Downloads/Untitled_cache', recursive = TRUE)
unlink('Downloads/Untitled_cache', recursive = TRUE)
a <- c("Result A", "Result B")
b <- c("Result D","Result C")
c <- c("test 1", "test 2")
d <- data.frame(a)
d
e <- data.frame(c,d)
e
library(tufte)
# invalidate cache when the tufte version changes
knitr::opts_chunk$set(tidy = FALSE, cache.extra = packageVersion('tufte'))
options(htmltools.dir.version = FALSE)
library(xtable)
options(xtable.floating=TRUE, xtable.timestamp="",xtable.comment=FALSE)
add.to.row <- list(pos = list(0), command = NULL) command <- paste0("\\hline\n\\endhead\n",
add.to.row <- list(pos = list(0), command = NULL) command <- paste0("\\hline\n\\endhead\n",
d <- c(1:10)
e <- d
f <- d
g <- data.frame(c,d,e)
g <- data.frame(f,d,e)
g
rownames(g)
rownames(g) <- "sample"+rownames(g)
rownames(g) <- c("sample")+rownames(g)
rownames(g) <- c("sample") + rownames(g)
rownames(g) <- merge("sample",rownames(g))
row.names()
row.names()
row.names(g)
row.names(g)<-toString(row.names(g))
g
d
d + "a"
merge("Sample", d)
d
g
row.names(g)<-d
g
d
d<-merge("Sample", d)
d
row.names(g)<-d
row.names(g)<-toString(row.names(g))
g
g <- data.frame(merge("string",row.names(g)),
he
)
a <- data.frame(name=c("A", "B"), b=1:2)
a
a <- data.frame(name=c("Aandy", "Ball"), b=1:2)
a
b <- data.frame(a=1:2, b=1:2)
b
row.names(b)<-a$name
b
a <- c(1:10)
b <- a
c <- a
d <- data.frame(a,b,c)
d
a <- merge("sample", 1:10)
a
a
d
a
a <- rep("sample",10)
a
a <_ c(1:10)
a <- c(1:10)
a
a <- merge("sample", a)
a
d
row.names(d)<-merge(a$x,a$y)
merge(a$x,a$y)
a
a <- c(1:10)
a
a <- "sample" & a
b <- rep("Sample", 10)
b
a
merge(b,1)
b
a
b <- b+a
b
a
b <- b+tostr(a)
b <- b+toString(a)
a
toString(a)
b <- [b+a]
b <- b+a
a
b
paste(a,b)
c <- paste(b,a)
c
row.names(d)
row.names(d)<- c[1]
row.names(d)<- c[,1]
d
c
c <- data.frame(c)
c
row.names(d) <- c$c
d
c <- paste(b,a)c
# R Conditional Probability Tree Diagram
# The Rgraphviz graphing package must be installed to do this
require("Rgraphviz")
# Change the three variables below to match your actual values
# These are the values that you can change for your own probability tree
# From these three values, other probabilities (e.g. prob(b)) will be calculated
# Probability of a
a<-.01
# Probability (b | a)
bGivena<-.99
# Probability (b | Â¬a)
bGivenNota<-.10
###################### Everything below here will be calculated
# Calculate the rest of the values based upon the 3 variables above
notbGivena<-1-bGivena
notA<-1-a
notbGivenNota<-1-bGivenNota
#Joint Probabilities of a and B, a and notb, nota and b, nota and notb
aANDb<-a*bGivena
aANDnotb<-a*notbGivena
notaANDb <- notA*bGivenNota
notaANDnotb <- notA*notbGivenNota
# Probability of B
b<- aANDb + notaANDb
notB <- 1-b
# Bayes theorum - probabiliyt of A | B
# (a | b) = Prob (a AND b) / prob (b)
aGivenb <- aANDb / b
# These are the labels of the nodes on the graph
# To signify "Not A" - we use A' or A prime
node1<-"P"
node2<-"A"
node3<-"A'"
node4<-"A&B"
node5<-"A&B'"
node6<-"A'&B"
node7<-"A'&B'"
nodeNames<-c(node1,node2,node3,node4, node5,node6, node7)
rEG <- new("graphNEL", nodes=nodeNames, edgemode="directed")
#Erase any existing plots
dev.off()
# Draw the "lines" or "branches" of the probability Tree
rEG <- addEdge(nodeNames[1], nodeNames[2], rEG, 1)
rEG <- addEdge(nodeNames[1], nodeNames[3], rEG, 1)
rEG <- addEdge(nodeNames[2], nodeNames[4], rEG, 1)
rEG <- addEdge(nodeNames[2], nodeNames[5], rEG, 1)
rEG <- addEdge(nodeNames[3], nodeNames[6], rEG, 1)
rEG <- addEdge(nodeNames[3], nodeNames[7], rEG, 10)
eAttrs <- list()
q<-edgeNames(rEG)
# Add the probability values to the the branch lines
eAttrs$label <- c(toString(a),toString(notA),
toString(bGivena), toString(notbGivena),
toString(bGivenNota), toString(notbGivenNota))
names(eAttrs$label) <- c(q[1],q[2], q[3], q[4], q[5], q[6])
edgeAttrs<-eAttrs
# Set the color, etc, of the tree
attributes<-list(node=list(label="foo", fillcolor="lightgreen", fontsize="15"),
edge=list(color="red"),graph=list(rankdir="LR"))
#Plot the probability tree using Rgraphvis
plot(rEG, edgeAttrs=eAttrs, attrs=attributes)
nodes(rEG)
edges(rEG)
#Add the probability values to the leaves of A&B, A&B', A'&B, A'&B'
text(500,420,aANDb, cex=.8)
text(500,280,aANDnotb,cex=.8)
text(500,160,notaANDb,cex=.8)
text(500,30,notaANDnotb,cex=.8)
text(340,440,"(B | A)",cex=.8)
text(340,230,"(B | A')",cex=.8)
#Write a table in the lower left of the probablites of A and B
text(80,50,paste("P(A):",a),cex=.9, col="darkgreen")
text(80,20,paste("P(A'):",notA),cex=.9, col="darkgreen")
text(160,50,paste("P(B):",round(b,digits=2)),cex=.9)
text(160,20,paste("P(B'):",round(notB, 2)),cex=.9)
text(80,420,paste("P(A|B): ",round(aGivenb,digits=2)),cex=.9,col="blue")
install.packages(Rgraphviz)
install.packages("RGraphviz")
data("iris")
iris
install.packages("kableExtra")
library(tufte)
# invalidate cache when the tufte version changes
knitr::opts_chunk$set(tidy = FALSE, cache.extra = packageVersion('tufte'))
options(htmltools.dir.version = FALSE)
library(kableExtra)
a <- mtcars[1:16, 1:6]
a
a <- mtcars[1:6, 1:6]
matris=matrix(as.integer(runif(30, min = 0, max = 1)), 6, 5)
matris
matris=matrix(as.integer(runif(30, min = 0, max = 1000)), 6, 5)
matris
matris=matrix(as.integer(runif(30, min = 0, max = 25)), 6, 5)
matris
matris=matrix(as.integer(runif(30, min = 0, max = 15)), 6, 5)
matris
matris=matrix(as.integer(runif(30, min = 0, max = 15)), 6, 5)
matris
matris=matrix(as.integer(runif(30, min = 0, max = 15)), 6, 5)
matris
matris=matrix(as.integer(runif(30, min = 0, max = 15)), 6, 5)
matris
matris=matrix(as.integer(runif(30, min = 0, max = 15)), 6, 5)
matris
matris=matrix(as.integer(runif(30, min = 0, max = 5)), 6, 5)
write.table(matris, row.names = F, col.names = F, sep = "\t")
matris
matris=matrix(as.integer(runif(30, min = 1, max = 5)), 6, 5)
matris
matris[2,4]
matris[2,4] <- 0
matris[2,5] <- 0
matris[3,5] <- 0
matris[3,4] <- 0
matris
matris=matrix(as.integer(runif(30, min = 1, max = 5)), 6, 5)
matris[2,4]<-0
matris[2,5]<-0
matris[3,4]<-0
matris[3,5]<-0
matris
install.packages('blogdown')
blogdown::install_hugo()
blogdown::install_hugo(force=TRUE)
blogdown::new_site(dir = "~/Downloads/blogdown")
pwd
knitr::opts_chunk$set(collapse = TRUE)
par(mar = c(0, 1, 0, 1))
pie(
c(280, 60, 20),
c('Sky', 'Sunny side of pyramid', 'Shady side of pyramid'),
col = c('#0292D8', '#F7EA39', '#C4B632'),
init.angle = -50, border = NA
)
par(mar = c(0, 1, 0, 1))
pie(
c(280, 60, 20),
c('Sky', 'Sunny side of pyramid', 'Shady side of pyramid'),
col = c('#0292D8', '#F7EA39', '#C4B632'),
init.angle = -50, border = NA
)
par(mar = c(0, 1, 0, 1))
pie(
c(280, 60, 20),
c('Sky', 'Sunny side of pyramid', 'Shady side of pyramid'),
col = c('#0292D8', '#F7EA39', '#C4B632'),
init.angle = -50, border = NA
)
summary(cars)
fit <- lm(dist ~ speed, data = cars)
fit
par(mar = c(0, 1, 0, 1))
pie(
c(280, 60, 20),
c('Sky', 'Sunny side of pyramid', 'Shady side of pyramid'),
col = c('#0292D8', '#F7EA39', '#C4B632'),
init.angle = -50, border = NA font=times
par(mar = c(0, 1, 0, 1))
pie(
c(280, 60, 20),
c('Sky', 'Sunny side of pyramid', 'Shady side of pyramid'),
col = c('#0292D8', '#F7EA39', '#C4B632'),
init.angle = -50, border = NA font="times"
par(mar = c(0, 1, 0, 1))
pie(
c(280, 60, 20),
c('Sky', 'Sunny side of pyramid', 'Shady side of pyramid'),
col = c('#0292D8', '#F7EA39', '#C4B632'),
init.angle = -50, border = NA
)
par(mar = c(0, 1, 0, 1))
pie(
c(280, 60, 20),
c('Sky', 'Sunny side of pyramid', 'Shady side of pyramid'),
col = c('#0292D8', '#F7EA39', '#C4B632'),
init.angle = -50, border = NA
)
par(mar = c(0, 1, 0, 1))
pie(
c(280, 60, 20),
c('Sky', 'Sunny side of pyramid', 'Shady side of pyramid'),
col = c('#0292D8', '#F7EA39', '#C4B632'),
init.angle = -50, border = NA
)
par(mar = c(0, 1, 0, 1))
pie(
c(280, 60, 20),
c('Sky', 'Sunny side of pyramid', 'Shady side of pyramid'),
col = c('#0292D8', '#F7EA39', '#C4B632'),
init.angle = -50, border = NA
)
par(mar = c(0, 1, 0, 1))
pie(
c(280, 60, 20),
# c('Sky', 'Sunny side of pyramid', 'Shady side of pyramid'),
col = c('#0292D8', '#F7EA39', '#C4B632'),
init.angle = -50, border = NA
)
pie?
?pie
?pie
par(mar = c(0, 1, 0, 1))
pie(
c(280, 60, 20),
c('Sky', 'Sunny side of pyramid', 'Shady side of pyramid'),
col = c('#0292D8', '#F7EA39', '#C4B632'),
init.angle = -50, border = NA
)
par(mar = c(0, 1, 0, 1))
pie(
c(280, 60, 20),
c('Sky', 'Sunny side of pyramid', 'Shady side of pyramid'),
col = c('#0292D8', '#F7EA39', '#C4B632'),
init.angle = -50, border = NA
)
warnings()
)
knitr::opts_chunk$set(collapse = TRUE)
par(mar = c(0, 1, 0, 1))
pie(
c(280, 60, 20),
c('Sky', 'Sunny side of pyramid', 'Shady side of pyramid'),
col = c('#0292D8', '#F7EA39', '#C4B632'),
init.angle = -50, border = NA
)
)
?plot()
?pie()
fonts()
install.packages('extrafont')
fonts()
library(extrafont)
font_import()
fonts()
par(mar = c(0, 1, 0, 1))
pie(
c(280, 60, 20),
c('Sky', 'Sunny side of pyramid', 'Shady side of pyramid'),
col = c('#0292D8', '#F7EA39', '#C4B632'),
init.angle = -50, border = NA
)
loadfonts()
par(mar = c(0, 1, 0, 1))
pie(
c(280, 60, 20),
c('Sky', 'Sunny side of pyramid', 'Shady side of pyramid'),
col = c('#0292D8', '#F7EA39', '#C4B632'),
init.angle = -50, border = NA
)
loadfonts(device = "postscript")
par(mar = c(0, 1, 0, 1))
pie(
c(280, 60, 20),
c('Sky', 'Sunny side of pyramid', 'Shady side of pyramid'),
col = c('#0292D8', '#F7EA39', '#C4B632'),
init.angle = -50, border = NA
)
par(mar = c(0, 1, 0, 1))
pie(
c(280, 60, 20),
c('Sky', 'Sunny side of pyramid', 'Shady side of pyramid'),
col = c('#0292D8', '#F7EA39', '#C4B632'),
init.angle = -50, border = NA, textFont="Times"
)
par(mar = c(0, 1, 0, 1))
pie(
c(280, 60, 20),
c('Sky', 'Sunny side of pyramid', 'Shady side of pyramid'),
col = c('#0292D8', '#F7EA39', '#C4B632'),
init.angle = -50, border = NA, Family="Times"
)
par(mar = c(0, 1, 0, 1))
pie(
c(280, 60, 20),
c('Sky', 'Sunny side of pyramid', 'Shady side of pyramid'),
col = c('#0292D8', '#F7EA39', '#C4B632'),
init.angle = -50, border = NA
)
knitr::opts_chunk$set(collapse = TRUE)
par(mar = c(0, 1, 0, 1))
pie(
c(280, 60, 20),
c('Sky', 'Sunny side of pyramid', 'Shady side of pyramid'),
col = c('#0292D8', '#F7EA39', '#C4B632'),
init.angle = -50, border = NA, textFont="Times"
)
par(mar = c(0, 1, 0, 1))
pie(
c(280, 60, 20),
c('Sky', 'Sunny side of pyramid', 'Shady side of pyramid'),
col = c('#0292D8', '#F7EA39', '#C4B632'),
init.angle = -50, border = NA
)
blogdown::new_site(dir = '~/Downloads/hugo2' theme='yihui/hugo-xmin')
blogdown::new_site(dir = "~/Downloads/hugo2", theme="yihui/hugo-xmin")
load("~/Downloads/hugo2/public/css/fonts.css")
blogdown::build_site()
setwd("~/Downloads/hugo2/")
library(blogdown)
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown:::insert_image_addin()
blogdown::build_site()
blogdown::stop_server()
getwd()
setwd("~/Downloads/test/")
blogdown::new_site(theme = "halogenica/beautifulhugo")
blogdown::build_site()
stop_server()
